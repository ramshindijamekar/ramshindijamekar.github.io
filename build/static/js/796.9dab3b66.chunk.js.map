{"version":3,"file":"static/js/796.9dab3b66.chunk.js","mappings":"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","sources":["../node_modules/@sanity/client/src/csm/studioPath.ts","../node_modules/@sanity/client/src/csm/jsonPath.ts","../node_modules/@sanity/client/src/csm/resolveMapping.ts","../node_modules/@sanity/client/src/csm/isRecord.ts","../node_modules/@sanity/client/src/csm/walkMap.ts","../node_modules/@sanity/client/src/csm/isArray.ts","../node_modules/@sanity/client/src/stega/encodeIntoResult.ts","../node_modules/@sanity/client/src/csm/getPublishedId.ts","../node_modules/@sanity/client/src/csm/createEditUrl.ts","../node_modules/@sanity/client/src/stega/filterDefault.ts","../node_modules/@sanity/client/src/stega/stegaEncodeSourceMap.ts","../node_modules/@sanity/client/src/csm/resolveEditInfo.ts"],"sourcesContent":["/** @alpha */\nexport type KeyedSegment = {_key: string}\n\n/** @alpha */\nexport type IndexTuple = [number | '', number | '']\n\n/** @alpha */\nexport type PathSegment = string | number | KeyedSegment | IndexTuple\n\n/** @alpha */\nexport type Path = PathSegment[]\n\nconst rePropName =\n  /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n/** @internal */\nexport const reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/\nconst reIndexTuple = /^\\d*:\\d*$/\n\n/** @internal */\nexport function isIndexSegment(segment: PathSegment): segment is number {\n  return typeof segment === 'number' || (typeof segment === 'string' && /^\\[\\d+\\]$/.test(segment))\n}\n\n/** @internal */\nexport function isKeySegment(segment: PathSegment): segment is KeyedSegment {\n  if (typeof segment === 'string') {\n    return reKeySegment.test(segment.trim())\n  }\n\n  return typeof segment === 'object' && '_key' in segment\n}\n\n/** @internal */\nexport function isIndexTuple(segment: PathSegment): segment is IndexTuple {\n  if (typeof segment === 'string' && reIndexTuple.test(segment)) {\n    return true\n  }\n\n  if (!Array.isArray(segment) || segment.length !== 2) {\n    return false\n  }\n\n  const [from, to] = segment\n  return (typeof from === 'number' || from === '') && (typeof to === 'number' || to === '')\n}\n\n/** @internal */\nexport function get<Result = unknown, Fallback = unknown>(\n  obj: unknown,\n  path: Path | string,\n  defaultVal?: Fallback,\n): Result | typeof defaultVal {\n  const select = typeof path === 'string' ? fromString(path) : path\n  if (!Array.isArray(select)) {\n    throw new Error('Path must be an array or a string')\n  }\n\n  let acc: unknown | undefined = obj\n  for (let i = 0; i < select.length; i++) {\n    const segment = select[i]\n    if (isIndexSegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc[segment]\n    }\n\n    if (isKeySegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc.find((item) => item._key === segment._key)\n    }\n\n    if (typeof segment === 'string') {\n      acc =\n        typeof acc === 'object' && acc !== null\n          ? ((acc as Record<string, unknown>)[segment] as Result)\n          : undefined\n    }\n\n    if (typeof acc === 'undefined') {\n      return defaultVal\n    }\n  }\n\n  return acc as Result\n}\n\n/** @alpha */\nexport function toString(path: Path): string {\n  if (!Array.isArray(path)) {\n    throw new Error('Path is not an array')\n  }\n\n  return path.reduce<string>((target, segment, i) => {\n    const segmentType = typeof segment\n    if (segmentType === 'number') {\n      return `${target}[${segment}]`\n    }\n\n    if (segmentType === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    if (isKeySegment(segment) && segment._key) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (Array.isArray(segment)) {\n      const [from, to] = segment\n      return `${target}[${from}:${to}]`\n    }\n\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``)\n  }, '')\n}\n\n/** @alpha */\nexport function fromString(path: string): Path {\n  if (typeof path !== 'string') {\n    throw new Error('Path is not a string')\n  }\n\n  const segments = path.match(rePropName)\n  if (!segments) {\n    throw new Error('Invalid path string')\n  }\n\n  return segments.map(parsePathSegment)\n}\n\nfunction parsePathSegment(segment: string): PathSegment {\n  if (isIndexSegment(segment)) {\n    return parseIndexSegment(segment)\n  }\n\n  if (isKeySegment(segment)) {\n    return parseKeySegment(segment)\n  }\n\n  if (isIndexTuple(segment)) {\n    return parseIndexTupleSegment(segment)\n  }\n\n  return segment\n}\n\nfunction parseIndexSegment(segment: string): PathSegment {\n  return Number(segment.replace(/[^\\d]/g, ''))\n}\n\nfunction parseKeySegment(segment: string): KeyedSegment {\n  const segments = segment.match(reKeySegment)\n  return {_key: segments![1]}\n}\n\nfunction parseIndexTupleSegment(segment: string): IndexTuple {\n  const [from, to] = segment.split(':').map((seg) => (seg === '' ? seg : Number(seg)))\n  return [from, to]\n}\n","import * as studioPath from './studioPath'\nimport type {\n  ContentSourceMapParsedPath,\n  ContentSourceMapParsedPathKeyedSegment,\n  ContentSourceMapPaths,\n  Path,\n} from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/**\n * @internal\n */\nexport function jsonPath(path: ContentSourceMapParsedPath): ContentSourceMapPaths[number] {\n  return `$${path\n    .map((segment) => {\n      if (typeof segment === 'string') {\n        const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      if (typeof segment === 'number') {\n        return `[${segment}]`\n      }\n\n      if (segment._key !== '') {\n        const escapedKey = segment._key.replace(/['\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `[?(@._key=='${escapedKey}')]`\n      }\n\n      return `[${segment._index}]`\n    })\n    .join('')}`\n}\n\n/**\n * @internal\n */\nexport function parseJsonPath(path: ContentSourceMapPaths[number]): ContentSourceMapParsedPath {\n  const parsed: ContentSourceMapParsedPath = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n\n    if (match[3] !== undefined) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push({\n        _key,\n        _index: -1,\n      })\n      continue\n    }\n  }\n\n  return parsed\n}\n\n/**\n * @internal\n */\nexport function jsonPathToStudioPath(path: ContentSourceMapParsedPath): Path {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._key !== '') {\n      return {_key: segment._key}\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\n/**\n * @internal\n */\nexport function studioPathToJsonPath(path: Path | string): ContentSourceMapParsedPath {\n  const parsedPath = typeof path === 'string' ? studioPath.fromString(path) : path\n\n  return parsedPath.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (Array.isArray(segment)) {\n      throw new Error(`IndexTuple segments aren't supported:${JSON.stringify(segment)}`)\n    }\n\n    if (isContentSourceMapParsedPathKeyedSegment(segment)) {\n      return segment\n    }\n\n    if (segment._key) {\n      return {_key: segment._key, _index: -1}\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\nfunction isContentSourceMapParsedPathKeyedSegment(\n  segment: studioPath.PathSegment | ContentSourceMapParsedPath[number],\n): segment is ContentSourceMapParsedPathKeyedSegment {\n  return typeof segment === 'object' && '_key' in segment && '_index' in segment\n}\n\n/**\n * @internal\n */\nexport function jsonPathToMappingPath(path: ContentSourceMapParsedPath): (string | number)[] {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n","import {jsonPath, jsonPathToMappingPath} from './jsonPath'\nimport type {ContentSourceMap, ContentSourceMapMapping, ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolveMapping(\n  resultPath: ContentSourceMapParsedPath,\n  csm?: ContentSourceMap,\n):\n  | {\n      mapping: ContentSourceMapMapping\n      matchedPath: string\n      pathSuffix: string\n    }\n  | undefined {\n  if (!csm?.mappings) {\n    return undefined\n  }\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath))\n\n  if (csm.mappings[resultMappingPath] !== undefined) {\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: '',\n    }\n  }\n\n  const mappings = Object.entries(csm.mappings)\n    .filter(([key]) => resultMappingPath.startsWith(key))\n    .sort(([key1], [key2]) => key2.length - key1.length)\n\n  if (mappings.length == 0) {\n    return undefined\n  }\n\n  const [matchedPath, mapping] = mappings[0]\n  const pathSuffix = resultMappingPath.substring(matchedPath.length)\n  return {mapping, matchedPath, pathSuffix}\n}\n","/** @internal */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n","import {isArray} from './isArray'\nimport {isRecord} from './isRecord'\nimport type {ContentSourceMapParsedPath, WalkMapFn} from './types'\n\n/**\n * generic way to walk a nested object or array and apply a mapping function to each value\n * @internal\n */\nexport function walkMap(\n  value: unknown,\n  mappingFn: WalkMapFn,\n  path: ContentSourceMapParsedPath = [],\n): unknown {\n  if (isArray(value)) {\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v['_key']\n        if (typeof _key === 'string') {\n          return walkMap(v, mappingFn, path.concat({_key, _index: idx}))\n        }\n      }\n\n      return walkMap(v, mappingFn, path.concat(idx))\n    })\n  }\n\n  if (isRecord(value)) {\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))]),\n    )\n  }\n\n  return mappingFn(value, path)\n}\n","/** @internal */\nexport function isArray(value: unknown): value is Array<unknown> {\n  return value !== null && Array.isArray(value)\n}\n","import type {ContentSourceMap} from '@sanity/client/csm'\n\nimport {parseJsonPath} from '../csm/jsonPath'\nimport {resolveMapping} from '../csm/resolveMapping'\nimport {walkMap} from '../csm/walkMap'\nimport type {Encoder} from './types'\n\n/**\n * @internal\n */\nexport function encodeIntoResult<Result>(\n  result: Result,\n  csm: ContentSourceMap,\n  encoder: Encoder,\n): Result {\n  return walkMap(result, (value, path) => {\n    // Only map strings, we could extend this in the future to support other types like integers...\n    if (typeof value !== 'string') {\n      return value\n    }\n\n    const resolveMappingResult = resolveMapping(path, csm)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const {mapping, matchedPath} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = csm.documents[mapping.source.document!]\n    const sourcePath = csm.paths[mapping.source.path]\n\n    const matchPathSegments = parseJsonPath(matchedPath)\n    const sourcePathSegments = parseJsonPath(sourcePath)\n    const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length))\n\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value,\n    })\n  }) as Result\n}\n","export const DRAFTS_PREFIX = 'drafts.'\n\n/** @internal */\nexport function getPublishedId(id: string): string {\n  if (id.startsWith(DRAFTS_PREFIX)) {\n    return id.slice(DRAFTS_PREFIX.length)\n  }\n\n  return id\n}\n","import {DRAFTS_PREFIX, getPublishedId} from './getPublishedId'\nimport {jsonPathToStudioPath} from './jsonPath'\nimport * as studioPath from './studioPath'\nimport type {CreateEditUrlOptions, EditIntentUrl, StudioBaseUrl} from './types'\n\n/** @internal */\nexport function createEditUrl(options: CreateEditUrlOptions): `${StudioBaseUrl}${EditIntentUrl}` {\n  const {\n    baseUrl,\n    workspace: _workspace = 'default',\n    tool: _tool = 'default',\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset,\n  } = options\n\n  if (!baseUrl) {\n    throw new Error('baseUrl is required')\n  }\n  if (!path) {\n    throw new Error('path is required')\n  }\n  if (!_id) {\n    throw new Error('id is required')\n  }\n  if (baseUrl !== '/' && baseUrl.endsWith('/')) {\n    throw new Error('baseUrl must not end with a slash')\n  }\n\n  const workspace = _workspace === 'default' ? undefined : _workspace\n  const tool = _tool === 'default' ? undefined : _tool\n  const id = getPublishedId(_id)\n  const stringifiedPath = Array.isArray(path)\n    ? studioPath.toString(jsonPathToStudioPath(path))\n    : path\n\n  // eslint-disable-next-line no-warning-comments\n  // @TODO Using searchParams as a temporary workaround until `@sanity/overlays` can decode state from the path reliably\n  const searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath,\n  })\n  if (workspace) {\n    searchParams.set('workspace', workspace)\n  }\n  if (tool) {\n    searchParams.set('tool', tool)\n  }\n  if (projectId) {\n    searchParams.set('projectId', projectId)\n  }\n  if (dataset) {\n    searchParams.set('dataset', dataset)\n  }\n  if (_id.startsWith(DRAFTS_PREFIX)) {\n    searchParams.set('isDraft', '')\n  }\n\n  const segments = [baseUrl === '/' ? '' : baseUrl]\n  if (workspace) {\n    segments.push(workspace)\n  }\n  const routerParams = [\n    'mode=presentation',\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`,\n  ]\n  if (tool) {\n    routerParams.push(`tool=${tool}`)\n  }\n  segments.push('intent', 'edit', `${routerParams.join(';')}?${searchParams}`)\n  return segments.join('/') as unknown as `${StudioBaseUrl}${EditIntentUrl}`\n}\n","import type {ContentSourceMapParsedPath, FilterDefault} from './types'\n\nexport const filterDefault: FilterDefault = ({sourcePath, resultPath, value}) => {\n  // Skips encoding on URL or Date strings, similar to the `skip: 'auto'` parameter in vercelStegaCombine()\n  if (isValidDate(value) || isValidURL(value)) {\n    return false\n  }\n\n  const endPath = sourcePath.at(-1)\n  // Never encode slugs\n  if (sourcePath.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && endPath.startsWith('_')) {\n    return false\n  }\n\n  /**\n   * Best effort infer Portable Text paths that should not be encoded.\n   * Nothing is for certain, and the below implementation may cause paths that aren't Portable Text and otherwise be safe to encode to be skipped.\n   * However, that's ok as userland can always opt-in with the `encodeSourceMapAtPath` option and mark known safe paths as such, which will override this heuristic.\n   */\n  // If the path ends in marks[number] it's likely a PortableTextSpan: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#LL154C16-L154C16\n  if (typeof endPath === 'number' && sourcePath.at(-2) === 'marks') {\n    return false\n  }\n  // Or if it's [number].markDefs[number].href it's likely a PortableTextLink: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L163\n  if (\n    endPath === 'href' &&\n    typeof sourcePath.at(-2) === 'number' &&\n    sourcePath.at(-3) === 'markDefs'\n  ) {\n    return false\n  }\n  // Otherwise we have to deal with special properties of PortableTextBlock, and we can't confidently know if it's actually a `_type: 'block'` array item or not.\n  // All we know is that if it is indeed a block, and we encode the strings on these keys it'll for sure break the PortableText rendering and thus we skip encoding.\n  // https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L48-L58\n  if (endPath === 'style' || endPath === 'listItem') {\n    return false\n  }\n\n  // Don't encode into anything that is suggested it'll render for SEO in meta tags\n  if (\n    sourcePath.some(\n      (path) => path === 'meta' || path === 'metadata' || path === 'openGraph' || path === 'seo',\n    )\n  ) {\n    return false\n  }\n\n  // If the sourcePath or resultPath contains something that sounds like a type, like iconType, we skip encoding, as it's most\n  // of the time used for logic that breaks if it contains stega characters\n  if (hasTypeLike(sourcePath) || hasTypeLike(resultPath)) {\n    return false\n  }\n\n  // Finally, we ignore a bunch of paths that are typically used for page building\n  if (typeof endPath === 'string' && denylist.has(endPath)) {\n    return false\n  }\n\n  return true\n}\n\nconst denylist = new Set([\n  'color',\n  'colour',\n  'currency',\n  'email',\n  'format',\n  'gid',\n  'hex',\n  'href',\n  'hsl',\n  'hsla',\n  'icon',\n  'id',\n  'index',\n  'key',\n  'language',\n  'layout',\n  'link',\n  'linkAction',\n  'locale',\n  'lqip',\n  'page',\n  'path',\n  'ref',\n  'rgb',\n  'rgba',\n  'route',\n  'secret',\n  'slug',\n  'status',\n  'tag',\n  'template',\n  'theme',\n  'type',\n  'unit',\n  'url',\n  'username',\n  'variant',\n  'website',\n])\n\nfunction isValidDate(dateString: string) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? Boolean(Date.parse(dateString)) : false\n}\n\nfunction isValidURL(url: string) {\n  try {\n    new URL(url, url.startsWith('/') ? 'https://acme.com' : undefined)\n  } catch {\n    return false\n  }\n  return true\n}\n\nfunction hasTypeLike(path: ContentSourceMapParsedPath): boolean {\n  return path.some((segment) => typeof segment === 'string' && segment.match(/type/i) !== null)\n}\n","import {vercelStegaCombine} from '@vercel/stega'\n\nimport {createEditUrl} from '../csm/createEditUrl'\nimport {jsonPathToStudioPath} from '../csm/jsonPath'\nimport {resolveStudioBaseRoute} from '../csm/resolveEditInfo'\nimport {reKeySegment, toString as studioPathToString} from '../csm/studioPath'\nimport {encodeIntoResult} from './encodeIntoResult'\nimport {filterDefault} from './filterDefault'\nimport {ContentSourceMap, ContentSourceMapParsedPath, InitializedStegaConfig} from './types'\n\nconst TRUNCATE_LENGTH = 20\n\n/**\n * Uses `@vercel/stega` to embed edit info JSON into strings in your query result.\n * The JSON payloads are added using invisible characters so they don't show up visually.\n * The edit info is generated from the Content Source Map (CSM) that is returned from Sanity for the query.\n * @public\n */\nexport function stegaEncodeSourceMap<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  config: InitializedStegaConfig,\n): Result {\n  const {filter, logger, enabled} = config\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\"\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  if (!resultSourceMap) {\n    logger?.error?.('[@sanity/client]: Missing Content Source Map from response body', {\n      result,\n      resultSourceMap,\n      config,\n    })\n    return result\n  }\n\n  if (!config.studioUrl) {\n    const msg = 'config.studioUrl must be defined'\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  const report: Record<'encoded' | 'skipped', {path: string; length: number; value: string}[]> = {\n    encoded: [],\n    skipped: [],\n  }\n\n  const resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({sourcePath, sourceDocument, resultPath, value}) => {\n      // Allow userland to control when to opt-out of encoding\n      if (\n        (typeof filter === 'function'\n          ? filter({sourcePath, resultPath, filterDefault, sourceDocument, value})\n          : filterDefault({sourcePath, resultPath, filterDefault, sourceDocument, value})) === false\n      ) {\n        if (logger) {\n          report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${\n              value.length > TRUNCATE_LENGTH ? '...' : ''\n            }`,\n            length: value.length,\n          })\n        }\n        return value\n      }\n\n      if (logger) {\n        report.encoded.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? '...' : ''}`,\n          length: value.length,\n        })\n      }\n\n      const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n        typeof config.studioUrl === 'function'\n          ? config.studioUrl(sourceDocument)\n          : config.studioUrl!,\n      )\n      if (!baseUrl) return value\n      const {_id: id, _type: type, _projectId: projectId, _dataset: dataset} = sourceDocument\n\n      return vercelStegaCombine(\n        value,\n        {\n          origin: 'sanity.io',\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...(!config.omitCrossDatasetReferenceData && {dataset, projectId}),\n          }),\n        },\n        // We use custom logic to determine if we should skip encoding\n        false,\n      )\n    },\n  )\n\n  if (logger) {\n    const isSkipping = report.skipped.length\n    const isEncoding = report.encoded.length\n    if (isSkipping || isEncoding) {\n      ;(logger?.groupCollapsed || logger.log)?.('[@sanity/client]: Encoding source map into result')\n      logger.log?.(\n        `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`,\n      )\n    }\n    if (report.encoded.length > 0) {\n      logger?.log?.(`[@sanity/client]: Table of encoded paths`)\n      ;(logger?.table || logger.log)?.(report.encoded)\n    }\n    if (report.skipped.length > 0) {\n      const skipped = new Set<string>()\n      for (const {path} of report.skipped) {\n        skipped.add(path.replace(reKeySegment, '0').replace(/\\[\\d+\\]/g, '[]'))\n      }\n      logger?.log?.(`[@sanity/client]: List of skipped paths`, [...skipped.values()])\n    }\n\n    if (isSkipping || isEncoding) {\n      logger?.groupEnd?.()\n    }\n  }\n\n  return resultWithStega\n}\n\nfunction prettyPathForLogging(path: ContentSourceMapParsedPath): string {\n  return studioPathToString(jsonPathToStudioPath(path))\n}\n","import {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport type {\n  CreateEditUrlOptions,\n  ResolveEditInfoOptions,\n  StudioBaseRoute,\n  StudioBaseUrl,\n  StudioUrl,\n} from './types'\n\n/** @internal */\nexport function resolveEditInfo(options: ResolveEditInfoOptions): CreateEditUrlOptions | undefined {\n  const {resultSourceMap: csm, resultPath} = options\n  const {mapping, pathSuffix} = resolveMapping(resultPath, csm) || {}\n\n  if (!mapping) {\n    // console.warn('no mapping for path', { path: resultPath, sourceMap: csm })\n    return undefined\n  }\n\n  if (mapping.source.type === 'literal') {\n    return undefined\n  }\n\n  if (mapping.source.type === 'unknown') {\n    return undefined\n  }\n\n  const sourceDoc = csm.documents[mapping.source.document]\n  const sourcePath = csm.paths[mapping.source.path]\n\n  if (sourceDoc && sourcePath) {\n    const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n      typeof options.studioUrl === 'function' ? options.studioUrl(sourceDoc) : options.studioUrl,\n    )\n    if (!baseUrl) return undefined\n    const {_id, _type, _projectId, _dataset} = sourceDoc\n    return {\n      baseUrl,\n      workspace,\n      tool,\n      id: _id,\n      type: _type,\n      path: parseJsonPath(sourcePath + pathSuffix),\n      projectId: _projectId,\n      dataset: _dataset,\n    } satisfies CreateEditUrlOptions\n  }\n\n  return undefined\n}\n\n/** @internal */\nexport function resolveStudioBaseRoute(studioUrl: StudioUrl): StudioBaseRoute {\n  let baseUrl: StudioBaseUrl = typeof studioUrl === 'string' ? studioUrl : studioUrl.baseUrl\n  if (baseUrl !== '/') {\n    baseUrl = baseUrl.replace(/\\/$/, '')\n  }\n  if (typeof studioUrl === 'string') {\n    return {baseUrl}\n  }\n  return {...studioUrl, baseUrl}\n}\n"],"names":["reKeySegment","toString","path","Array","isArray","Error","reduce","target","segment","i","segmentType","test","trim","isKeySegment","_key","from","to","JSON","stringify","ESCAPE","UNESCAPE","parseJsonPath","parsed","parseRe","match","exec","replace","m","push","_index","parseInt","key","jsonPathToStudioPath","map","resolveMapping","resultPath","csm","mappings","resultMappingPath","join","jsonPath","mapping","matchedPath","pathSuffix","Object","entries","filter","_ref","startsWith","sort","_ref2","_ref3","key1","key2","length","substring","isRecord","value","walkMap","mappingFn","arguments","undefined","v","idx","concat","fromEntries","_ref4","k","encodeIntoResult","result","encoder","resolveMappingResult","type","source","sourceDocument","documents","document","sourcePath","paths","matchPathSegments","fullSourceSegments","slice","DRAFTS_PREFIX","createEditUrl","options","baseUrl","workspace","_workspace","tool","_tool","id","_id","projectId","dataset","endsWith","getPublishedId","stringifiedPath","searchParams","URLSearchParams","set","segments","routerParams","encodeURIComponent","filterDefault","_ref5","dateString","Date","parse","url","URL","isValidURL","endPath","at","some","hasTypeLike","denylist","has","Set","TRUNCATE_LENGTH","stegaEncodeSourceMap","resultSourceMap","config","logger","enabled","msg","error","TypeError","studioUrl","report","encoded","skipped","resultWithStega","_ref6","prettyPathForLogging","resolveStudioBaseRoute","_type","_projectId","_dataset","C","origin","href","omitCrossDatasetReferenceData","isSkipping","isEncoding","groupCollapsed","log","table","add","values","groupEnd"],"sourceRoot":""}